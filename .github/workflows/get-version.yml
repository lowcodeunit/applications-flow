name: Get Version

on:
  push:
    branches: 
    - 'integration'
    - 'feature/**'

jobs:  
  buildDeploy: 
    name: Build Prerelease
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
        
    - name: Set branch name
      id: vars
      run: echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}
    - name: Check output
      run: echo "The current branch is ${{ steps.vars.outputs.short_ref }}"
      
    - name: Bump version and push tag
      uses: anothrNick/github-tag-action@1.26.0
      id: versionBump
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_BRANCHES: integration,feature* 
        DEFAULT_BUMP: patch
        WITH_V: false
    - run: echo "The new version is ${{ steps.versionBump.outputs.new_tag }}"  
    
    - name: pwshell script1
      if: ${{ steps.versionBump.outputs.new_tag != '' }}
      shell: pwsh
      run: (Get-Content -path package.json -Raw) -replace "--access public","--access public --tag ${{ steps.vars.outputs.short_ref }}"
    - name: pwshell script2
      if: ${{ steps.versionBump.outputs.new_tag != '' }}
      shell: pwsh          
      run: (Get-Content -path package.json -Raw) -replace "--access public","--access public --tag ${{ steps.vars.outputs.short_ref }}" | Set-Content -Path package.json
    - name: pwshell script3
      if: ${{ steps.versionBump.outputs.new_tag != '' }}
      shell: pwsh          
      run: (Get-Content -path package.json -Raw) -replace "version patch","version ${{ steps.versionBump.outputs.new_tag }}-${{ steps.vars.outputs.short_ref }} --no-git-tag-version -f"
    - name: pwshell script4
      if: ${{ steps.versionBump.outputs.new_tag != '' }}
      shell: pwsh          
      run: (Get-Content -path package.json -Raw) -replace "version patch","version ${{ steps.versionBump.outputs.new_tag }}-${{ steps.vars.outputs.short_ref }} --no-git-tag-version -f" | Set-Content -Path package.json
    
    - uses: actions/setup-node@v2
      with:
        node-version: 12
        registry-url: 'https://registry.npmjs.org'
    - name: NPM Install (ci)
      if: ${{ steps.versionBump.outputs.new_tag != '' }}
      run: npm ci
    - uses: actions/setup-node@v2
      with:
        registry-url: 'https://npm.pkg.github.com'      
    - name: NPM Publish
      if: ${{ steps.versionBump.outputs.new_tag != '' }}
      run: npm run deploy
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}	  
